alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }

start = _{ SOI ~ declaration* ~ EOI}

declaration = {
    architecture_declaration
  | concepts
  | struct_for_declaration
  | concept_declaration
  | contract_declaration
  | api_declaration
}

layered_declaration = {
    "layered" | "分层"
}

architecture_declaration = {
    "architecture" | "架构"
}

component_declaration = {
    "component"
}

struct_for_declaration = {
    "struct" ~ "for" ~ identifier ~ "{" ~ struct_node* ~ "}"
}

concept_declaration = {
    "concept" ~ (identifier | string_literal) ~ "{" ~ comments? ~ ( inline_struct_declaration | behavior_declaration)* ~ "}"
}

inline_struct_declaration = {
    "struct" ~ "{" ~ struct_node* ~ "}"
    | "struct" ~ "uml" ~ "::" ~ source ~ "." ~ "class" ~ "(" ~ string_literal ~ ")"
}

struct_node = {
    identifier ~ ("," ~ identifier)* ~ ":" ~ struct_type
}

struct_type = {
    identifier
}

behavior_declaration = {
    "behavior" ~ "{" ~ "}"
}

contract_declaration = {
    contract_ident_decl
    | contract_class_decl
}

api_declaration = {
   "api" ~ "for" ~ api_ident ~ "{" ~ "}"
}

api_ident = {
   ('a'..'z' | 'A'..'Z' | "_" | "-" | "/" | ":" | "@" | "#" | "?" | "%" | "=" | "&" | "~" | ".") ~
    api_chars*
}

api_chars = _{'a'..'z' | 'A'..'Z' | "_" | "-" | "/" | ":" | "@" | "#" | "?" | "%" | "=" | "&" | "~"| "." | '0'..'9'}

contract_ident_decl = {
  "contract" ~ "for" ~ (identifier | string_literal) ~ "{" ~ precondition? ~ during? ~ postcondition? ~ "}"
}

during = {
  "during"
}

precondition = {
  "precondition" ~ "{" ~ condition_lang ~ ":"  ~ expr ~ "}"
}

postcondition = {
  "postcondition" ~ "{" ~ condition_lang ~ ":"  ~ expr ~ "}"
}

condition_lang = {
    string_literal | identifier
}

// todo: support for normal expr 
expr = {
    "not" ~ "empty"
}

contract_class_decl = {
  "contract" ~ "for" ~ contract_class ~ "{" ~ "}"
}

contract_class = {
  identifier ~ ("(" ~ extends ~ ")")?
}

extends = {
    identifier ~ ("," ~ identifier)*
}

source = { file | dir }

file = {
   "file" ~ "(" ~ string_literal ~ ")"
}

dir = {
   "dir" ~ "(" ~ string_literal ~ ")"
}

concepts = {
    "concepts" ~ "=" ~ ">" ~ ("file" | "dir") ~ "(" ~ string_literal ~ ")"
}

// ascii_char = @{ '\x00'..'\x7f' }

string_literal = @{
    double_quoted_string |
    single_quoted_string
}

double_quoted_string  = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\""}
single_quoted_string  = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'"}

identifier = @{
    ('a'..'z' | 'A'..'Z' | "_") ~
    all_chars*
}
all_chars = _{'a'..'z' | 'A'..'Z' | "_" | '0'..'9'}

// empty line
newline    = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | NEWLINE }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
comments = { COMMENT* }
COMMENT    = {  block_comment | (("//" | "--") ~ (!NEWLINE ~ ANY)*) }
