alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }

start = _{ SOI ~ declaration* ~ EOI}

declaration = {
    arch_decl
  | struct_for_decl
  | concept_decl
  | concepts_decl
  | contract_for_decl
  | api_root_decl
  | concept_space_decl
}

concept_space_decl = {
    space_text ~ identifier ~ "{" ~ space_body? ~ "}"
}

space_body = {
    space_node ~ (","? ~ space_node)* ~ ";"?
}

space_node = {
    space_package_decl
   | space_concepts_decl
}

space_package_decl = {
    "package" ~ ":" ~ string_literal
}

space_concepts_decl = {
    "items" ~ ":" ~ "{" ~ identifier ~ ("," ~ identifier)* ~ "}"
}

space_text = {
    "space"
}

struct_for_decl = {
    "struct" ~ "for" ~ identifier ~ "{" ~ struct_body? ~ "}"
}

contract_for_decl = {
  "contract" ~ "for" ~ (identifier | string_literal) ~ "{" ~ contract_body* ~ "}"
}

contract_body = {
    pre_cond
    | post_cond
}

concept_decl = {
    "concept" ~ (identifier | string_literal)  ~ extends? ~ "{" ~ comments? ~ ( inner_struct_decl | struct_import_decl | inner_behavior_decl)* ~ "}"
}

extends = {
    "(" ~ identifier ~ ("," ~ identifier)* ~ ")"
}

inner_struct_decl = {
    "struct" ~ "{" ~ struct_body? ~ "}"
}

struct_import_decl = {
    "struct" ~ "uml" ~ "::" ~ source ~ "." ~ "class" ~ "(" ~ string_literal ~ ")"
}

struct_node = {
    identifier ~ ("," ~ identifier)? ~ ":" ~ struct_type
}

struct_body = {
    struct_node ~ ("," ~ struct_node)*
    | one_line_struct*
}

one_line_struct = {
    identifier ~ ("," ~ identifier)* ~ ":" ~ struct_type ~ ";"
}

struct_type = {
    identifier
}

inner_behavior_decl = {
    "behavior" ~ "{" ~ interface_decl* ~ "}"
}

interface_decl = {
    identifier ~ "(" ~ params? ~ ")" ~ (":" ~ return_type)? ~ ";"
}

params = {
    parameter ~ ("," ~ parameter)*
}

parameter = {
    identifier ~ ":" ~ param_type
}

param_type = { identifier }
return_type = { identifier }

api_root_decl = {
   "api" ~ "for" ~ api_ident ~ "{" ~ api_body? ~ "}"
}

api_body = {
    "import" ~ string_literal
     | api_decl*
}

api_decl = {
    inbound
    | outbound
    | pre_cond
    | post_cond
}

inbound = {
    "in" ~ "{" ~ struct_body ~ "}"
}

outbound = {
    "out" ~ "{" ~ struct_body ~ "}"
}

api_ident = {
   ('a'..'z' | 'A'..'Z' | "_" | "-" | "/" | ":" | "@" | "#" | "?" | "%" | "=" | "&" | "~" | ".") ~
    api_chars*
}

api_chars = _{'a'..'z' | 'A'..'Z' | "_" | "-" | "/" | ":" | "@" | "#" | "?" | "%" | "=" | "&" | "~"| "." | '0'..'9'}

during = {
  "during"
}

pre_cond = {
  pre_cond_text ~ "{" ~ condition ~ ((";" | ",") ~ condition)* ~ "}"
}

pre_cond_text = {
  "precondition" | "pre_cond" | "precond"
}

post_cond = {
  post_cond_text ~ "{" ~ condition ~ ((";" | ",") ~ condition)* ~ "}"
}

condition = {
    cond_text ~ ":"  ~ cond_expr ~ ";"?
}

post_cond_text = {
  "postcondition" | "post_cond" | "precond"
}

cond_text = {
    string_literal | identifier
}

// todo: support for normal expr
cond_expr = {
    unary_operator ~ identifier
    | string_literal
}

source = { file | dir }

file = {
   "file" ~ "(" ~ string_literal ~ ")"
}

dir = {
   "dir" ~ "(" ~ string_literal ~ ")"
}

concepts_decl = {
    "concepts" ~ "=" ~ ">" ~ cataloging ~ "(" ~ string_literal ~ ")"
}

cataloging = {
    "file" | "dir"
}

// semantics condition
// extension

// arithmetic
exponent                    =  { "**" }
multiply                    =  { "*" }
divide                      =  { "/" }
modulus                     =  { "%" }
plus                        =  { "+" }
minus                       =  { "-" }

// bit
bit_shl                     =  { "<<" }
bit_shr                     =  { ">>" }
bit_and                     =  { "&" }
bit_or                      =  { "|" }
bit_xor                     =  { "^" }
bit_not                     =  { "~" }

// todo: thinking in more assign
assign                      =  { "=" }

// comparison
equal                       =  { "==" }
less                        =  { "<" }
less_equal                  =  { "<=" }
greater                     =  { ">" }
greater_equal               =  { ">=" }
not_equal                   =  { "!=" }

and                         =  { "and" | "&&" }
or                          =  { "or" | "||" }
not                         =  { "not" | "!" }

bool                        =  { bool_true | bool_false }
bool_true                   =  { "true" }
bool_false                  =  { "false" }

unary_operator              = _{ not }

layered_declaration = {
    "layered" | "分层"
}

arch_decl = {
    "architecture" | "arch" | "架构"
}

component_declaration = {
    "component" | "comp" | "组件"
}

string_literal = @{
    double_quoted_string |
    single_quoted_string
}

double_quoted_string  = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\""}
single_quoted_string  = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'"}

identifier = @{
    ('a'..'z' | 'A'..'Z' | "_") ~
    all_chars*
}
all_chars = _{'a'..'z' | 'A'..'Z' | "_" | '0'..'9'}

newline    = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | NEWLINE }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
comments = { COMMENT* }
COMMENT    = {  block_comment | (("//" | "--") ~ (!NEWLINE ~ ANY)*) }
