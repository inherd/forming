# base: micro-frontends
# graphviz like?
style micro-frontends {
  node ""
}

# 框框图
# frame
business {
    frame "frontend" {
        frame "customer relation" {
            frame "";
        };
    }

    frame "channel" {
        frames "", "", "", "";
# or markdown table ?
        frames = | | |  | |
    }
}

# 应用全景图
# landscape
# ascii-doctor?

# 概念模型
# concept_model or concept
concept_model {

}

# include "physical design" ?
database {

}

# 系统架构图
# Graphviz like ?

# 包内分层
# D3.js?

# custom graphviz like?
ea {
    # define logic office
    # logic group
    # physical group
  group office {
    bank("手机银行")
    internet_bank("网银")
  }
  group zhongtai {
    transaction_center("")
  }
  group backend {
    # config: in-order
    paas
    iaas
  }
}

architecture {

}

# Modeling model?

# define role ?
# define(role) participant
# define(role) executor
# usecase for examples? 用例示例
# Noun 名词，Domain Noun 领域名词
# event or Domain Event?

system {
    role {}
    sub_system { }
}

feature {
    ...
}

thread {
    ...
}

# π-ADL
component {
    port [incoming | outgoing] (connection )
    in
    out
    ...
   subcomponent ...
}

# meta type or type?
meta type MyMetaType1 {
  tag creator, description: text;
  tag cost, version: number;
  tag edited*: date;
}


# diagram { }
# object_diagram | feature_diagram | class_diagram
diagram object ObjectA {

}

diagram feature AccountManager {

}

diagram class Account {

}

# aka
task task1 { }
connect(task1, task2);

# kafka
event event1 { }
connect(event1, event2);

# to graphviz ?
# in-text
layer = {
   "UI",
   "Logic",
   "Storage"
}

# in-graphic with ascii-doctor?
layer = """
|-------------------------|
| UI                      |
|----------|              |
|  Logic   |              |
|-------------------------|
|  Infrastructure         |
|                         |
|  [storage]  [redis]     |
|                         |
|-------------------------|
""";

repository serviceA {
  git: url
}

# DevOps
artifact serviceA {
    repository serviceA
    deploy_unit { }
    continuous_integration: ""
    ci: ""
}

# Viewpoint

viewpoint { }
view { }

# 引用知识
# 知识回显：knowledge echo
# decisions
# 架构决策 - 对齐企业架构中的相关概念
decisions {
    adr {
      path ""
    }
}

# comments ?
# for source code ?
attachments {
  attachment { }
  attachment { }
  # source_code "hello.c"?
}

# or
attachment "/hello.att";

# DDD
domain {
    mall {
        # entity
        aggregate order {
            fields ?
            entity orderItem { }

            # 1-N, 0-N, 1-1, 0-1
            relation: 1..N-0..1 to address
        }
    }
}
